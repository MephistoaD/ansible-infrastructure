---
- name: STOP OR REMOVE GUEST
  block:
  # - name: Set ha-status to stopped
  #   delegate_to: "{{ delegate_to_guest_pve_instance }}"
  #   vars:
  #     ha_guest_type_naming:
  #       vm: vm
  #       lxc: ct
  #   shell: 
  #     executable: /bin/bash
  #     cmd: |
  #       /usr/bin/pvesh delete /cluster/ha/resources/{{ ha_guest_type_naming[technology] }}:{{ vmid }}
  #   when:
  #     - "'hastate' in current_guest_config"

  - name: Update onboot status
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    vars:
      new_onboot: '{{ status.value == "active" }}'
    shell:
      executable: /bin/bash
      cmd: |
        /usr/bin/pvesh set /nodes/{{ delegate_to_guest_pve_instance }}/{{ proxmox_guest_technology[technology] }}/{{ vmid }}/config \
          --onboot {{ new_onboot }}
    register: update_onboot_status
    when: "'onboot' not in current_guest_config or ('onboot' in current_guest_config and (current_guest_config.onboot) != new_onboot)"
    loop_control:
      label: "{{ 'onboot' in current_guest_config and current_guest_config.onboot }} -> {{ new_onboot }}"
    loop:
      - once
  
  - name: Stop guest
    vars:
      current_vm_config: "{{ ansible_local.pve['guests_by_id'][vmid | string] }}"
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    shell:
      executable: /bin/bash
      cmd: |
        /usr/bin/pvesh create /nodes/{{ delegate_to_guest_pve_instance }}/{{ proxmox_guest_technology[technology] }}/{{ vmid }}/status/stop
    register: stop_guest
    when: current_vm_config.status == 'running'

  - name: Remove guest
    vars:
      command:
        vm: "qm destroy {{ vmid}}"
        lxc: "pct destroy {{ vmid }} --purge" # purge removes the ct from jobs and other configs
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    shell:
      executable: /bin/bash
      cmd: "{{ command[technology] }}"
    when: 
      - "status.value == 'decommissioning' or deploy_guest in ['redeploy', 'purge']"

  - name: End host if guest is offline
    meta: end_host
    when:
      - status.value in ['offline', 'decommissioning'] or deploy_guest in ['purge', 'stop'] or (stop_guest is defined and stop_guest and deploy_guest != 'redeploy')

  - name: "Collect ansible_local on {{ delegate_to_pve_instance }}"
    delegate_to: "{{ delegate_to_pve_instance }}"
    run_once: true
    setup:
      filter: ansible_local
