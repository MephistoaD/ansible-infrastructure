---
- name: RESTORE GUEST
  vars:
    api_technology: "{{ 'qemu' if custom_fields.technology == 'vm' else custom_fields.technology }}"
    pool: "{{ custom_fields.pool }}"
    guest_storage: "node-local"
    delegate_to_pve_instance: "{{ groups['_pve'][0] }}" # the node where the lxc is created / the guest list is scraped
    delegate_to_guest_pve_instance: "{{ ansible_local.pve.guests_by_id[vmid].node }}"
  block:
  - name: "Collect ansible_local on {{ delegate_to_pve_instance }}"
    delegate_to: "{{ delegate_to_pve_instance }}"
    setup:
      filter: ansible_local

  - debug:
      var: ansible_local.pve.guests_by_id[vmid]

  - name: Get list of backups for this guest
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    ansible.builtin.shell:
      executable: /bin/bash
      cmd: |
        pvesh get /nodes/{{ delegate_to_guest_pve_instance }}/storage/backups-{{ pool }}/content \
          --content backup \
          --output-format json | jq 'map(select(.vmid=={{ vmid }} and .notes=="{{ backup_note }}")) | last'
    register: vm_existing_backup_raw

  - debug:
      var: vm_existing_backup_raw.stdout | from_json

  - name: "Stop guest"
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    ansible.builtin.shell:
      executable: /bin/bash
      cmd: pvesh create /nodes/{{ delegate_to_guest_pve_instance }}/{{ api_technology }}/{{ vmid }}/status/stop

  - name: "Restore guest"
    vars:
      backup: "{{ vm_existing_backup_raw.stdout | from_json }}"
      command:
        lxc: |
          pvesh create /nodes/{{ delegate_to_guest_pve_instance }}/{{ api_technology }} \
            --vmid {{ vmid }} \
            --storage "{{ guest_storage }}" \
            --ostemplate "{{ backup.volid }}" \
            --force \
            --start \
            --restore
        vm: |
          pvesh create /nodes/{{ delegate_to_guest_pve_instance }}/{{ api_technology }} \
            --vmid {{ vmid }} \
            --archive "{{ backup.volid }}" \
            --force \
            --start
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    shell:
      executable: /bin/bash
      cmd: "{{ command[custom_fields.technology] }}"
    register: vm_restore_raw
  
  - vars:
    debug:
      var: vm_restore_raw.stdout_lines
  
  - name: Wait until the guest is online and sshd started
    become: false
    local_action:
      module: wait_for
      host: "{{ primary_ip4 }}"  # Replace with your target host
      port: 22  # SSH port
      state: started
      timeout: 300  # Adjust the timeout as needed (in seconds)

  - name: Locking instance for future automated upgrades
    shell:
      executable: /bin/bash
      cmd: /usr/local/bin/autoup lock Last system upgrade failed
    register: lock_autoup_raw
  
  - debug:
      var: lock_autoup_raw.stdout_lines

  - fail:
      msg: "Job failed, previous state was restored"