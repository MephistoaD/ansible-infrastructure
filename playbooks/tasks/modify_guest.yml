---
- name: MODIFY GUEST
  vars:
    current_memory: "{{ current_guest_config.maxmem / 1024 / 1024 | int }}"
  block:
  - name: CLOUDINIT
    vars:
      cloudinit_storage_mount: "{{ '/var/lib/vz' if cloudinit_storage == 'local' else '/mnt/pve/' + cloudinit_storage }}/snippets"
      current_cloudinit_config: "{{ current_cloudinit_config_raw.stdout | from_yaml }}"
    when:
      - technology == "vm"
    block:
    - name: Get current cloudinit config
      delegate_to: "{{ delegate_to_guest_pve_instance }}"
      shell:
        executable: /bin/bash
        cmd: |
          /usr/bin/pvesh get /nodes/{{ delegate_to_guest_pve_instance }}/qemu/{{ vmid }}/cloudinit/dump --type user
          /usr/bin/pvesh get /nodes/{{ delegate_to_guest_pve_instance }}/qemu/{{ vmid }}/cloudinit/dump --type network
          /usr/bin/pvesh get /nodes/{{ delegate_to_guest_pve_instance }}/qemu/{{ vmid }}/cloudinit/dump --type meta
      register: current_cloudinit_config_raw
      changed_when: false

    - debug: var=current_cloudinit_config

    - name: Update cloudinit user
      delegate_to: "{{ delegate_to_guest_pve_instance }}"
      shell:
        executable: /bin/bash
        cmd: |
          # Create cloudinit drive
          qm set {{ vmid }} --ide2 {{ guest_storage }}:cloudinit

          # By some weird reason the ssh key needs to be passed as file:
          ansible_pubkey="/tmp/ansible_id_rsa.pub"
          echo {{ allowed_ssh_publickey }} > $ansible_pubkey
          qm set {{ vmid }} \
            --ciuser "{{ cloudinit_user }}" \
            --sshkeys $ansible_pubkey
      register: cloudinit_user_raw
      when:
      - (('user' not in current_cloudinit_config) or
        ('ssh_authorized_keys' not in current_cloudinit_config) or
        (current_cloudinit_config.user is defined and current_cloudinit_config.user != cloudinit_user) or
        (current_cloudinit_config.ssh_authorized_keys is defined and allowed_ssh_publickey not in current_cloudinit_config.ssh_authorized_keys))

    - name: Update cloudinit network
      delegate_to: "{{ delegate_to_guest_pve_instance }}"
      shell:
        executable: /bin/bash
        cmd: |
          # Create cloudinit drive
          qm set {{ vmid }} --ide2 {{ guest_storage }}:cloudinit

          # The cloudinit config must be passed before initial boot
          qm set {{ vmid }} \
            --ipconfig0 gw={{ gateway }},ip={{ primary_ip4 }}/24 \
            --nameserver {{ nameserver }} \
            --ciupgrade false
      register: cloudinit_network_raw
      when:
      - ('subnets' not in current_cloudinit_config.config[0] or
        current_cloudinit_config.config[0].subnets[0].address != primary_ip4 or
        current_cloudinit_config.config[0].subnets[0].gateway != gateway or
        nameserver not in current_cloudinit_config.config[1].address)

    - include_role:
        name: baseline
        tasks_from: reboot_system
      when:
      - cloudinit_network_raw.changed or cloudinit_user_raw.changed
      - current_guest_config['status'] == 'running'


  - name: Add lxc_custom_config_lines
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    ansible.builtin.lineinfile:
      path: "/etc/pve/lxc/{{ vmid }}.conf"
      regexp: '^{{ item }}:'
      line: "{{ item }}: {{ lxc_custom_config_lines[item] }}"
    when:
      - technology == "lxc"
      - item not in current_guest_config
      - lxc_custom_config_lines is defined
    loop: "{{ lxc_custom_config_lines | default([]) | flatten(levels=1) }}"

  - name: Update hostname
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    shell:
      executable: /bin/bash
      cmd: |
        /usr/bin/pvesh set /nodes/{{ delegate_to_guest_pve_instance }}/{{ proxmox_guest_technology[technology] }}/{{ vmid }}/config \
          --name {{ inventory_hostname }}
    register: update_hostname
    when: current_guest_config['name'] != inventory_hostname
    loop_control:
      label: "{{ current_guest_config['name'] }} -> {{ inventory_hostname }}"
    loop:
      - once

  - name: Update vCPUs
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    vars:
      current_guest_cpu: "{{ current_guest_config['maxcpu'] }}"
    shell:
      executable: /bin/bash
      cmd: |
        /usr/bin/pvesh set /nodes/{{ delegate_to_guest_pve_instance }}/{{ proxmox_guest_technology[technology] }}/{{ vmid }}/config \
          --cores {{ vcpus | int }}
    register: update_vcpus
    when: vcpus | int != current_guest_cpu | int
    loop_control:
      label: "{{ current_guest_cpu | int }} -> {{ vcpus | int }} cores"
    loop:
      - once

  - name: Update memory
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    shell:
      executable: /bin/bash
      cmd: |
        /usr/bin/pvesh set /nodes/{{ delegate_to_guest_pve_instance }}/{{ proxmox_guest_technology[technology] }}/{{ vmid }}/config \
          --memory {{ memory }}
    register: update_memory
    when: current_memory | int != memory
    loop_control:
      label: "{{ current_memory | int }} -> {{ memory }} MB"
    loop:
      - once

  - name: Resize disk
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    shell:
      executable: /bin/bash
      cmd: |
        /usr/bin/pvesh set /nodes/{{ delegate_to_guest_pve_instance }}/{{ proxmox_guest_technology[technology] }}/{{ vmid }}/resize \
          --disk rootfs \
          --size {{ disk }}G
    register: update_memory
    when:
      - technology == "lxc" and disk > current_guest_config.storage.rootfs.size
    loop_control:
      label: "{{ current_guest_config.storage.rootfs.size if technology == 'lxc' }} -> {{ disk }} GB"
    loop:
      - once

  - name: Error on different disk sizes (VM only)
    fail:
      msg: "The current guests rootfs size is {{ current_guest_config.storage.scsi0.size }}GB but the netbox defines it to be {{ disk }}. Automatic disk changes are not implemented yet."
    when:
      - technology == "vm"
      - current_guest_config.storage.scsi0.size != disk


  - name: Start guest if active
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    shell:
      executable: /bin/bash
      cmd: |
        /usr/bin/pvesh create /nodes/{{ delegate_to_guest_pve_instance }}/{{ proxmox_guest_technology[technology] }}/{{ vmid }}/status/start
    register: start_guest
    when: current_guest_config['status'] == 'stopped' and status.value == 'active'

  - name: Update onboot status
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    vars:
      new_onboot: '{{ status.value == "active" }}'
    shell:
      executable: /bin/bash
      cmd: |
        /usr/bin/pvesh set /nodes/{{ delegate_to_guest_pve_instance }}/{{ proxmox_guest_technology[technology] }}/{{ vmid }}/config \
          --onboot {{ new_onboot }}
    register: update_onboot_status
    when: "'onboot' not in current_guest_config or ('onboot' in current_guest_config and (current_guest_config.onboot) != new_onboot)"
    loop_control:
      label: "{{ 'onboot' in current_guest_config and current_guest_config.onboot }} -> {{ new_onboot }}"
    loop:
      - once

  - name: Update pool
    delegate_to: "{{ delegate_to_guest_pve_instance }}"
    shell:
      executable: /bin/bash
      cmd: |
        /usr/bin/pvesh set pools/{{ current_guest_config.pool }} --vms {{ vmid }} --delete true
        /usr/bin/pvesh set pools/{{ pool | upper }} --vms {{ vmid }}
    register: update_pool
    when: pool | upper != current_guest_config.pool
    loop_control:
      label: "{{ current_guest_config.pool | upper }} -> {{ pool | upper }}"
    loop:
      - once

  - name: Wait until the guest is online and sshd started
    become: false
    local_action:
      module: wait_for
      host: "{{ primary_ip4 }}"  # Replace with your target host
      port: 22  # SSH port
      state: started
      timeout: 300  # Adjust the timeout as needed (in seconds)
