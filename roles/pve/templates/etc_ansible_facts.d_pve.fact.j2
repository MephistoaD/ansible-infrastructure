#!/usr/bin/env python3

import subprocess
import json
import re
import os
from typing import List, Dict, Any, Optional, Union


def run_command(command: List[str]) -> str:
    """Runs a shell command and returns the output as a string."""
    try:
        return subprocess.check_output(command, universal_newlines=True).strip()
    except subprocess.CalledProcessError as e:
        print(f"Error running command {' '.join(command)}: {e}")
        exit(1)


def get_all_cluster_resources() -> List[Dict[str, Any]]:
    """Fetches all cluster resources using the pvesh command."""
    return json.loads(run_command(["pvesh", "get", "/cluster/resources", "--output-format", "json"]))


def get_config_path(vmid: str) -> Optional[str]:
    """Finds the configuration file path for a given VM ID."""
    try:
        config_path = run_command(["find", "/etc/pve/nodes", "-type", "f", "-name", f"{vmid}.conf"])
        return config_path if config_path else None
    except subprocess.CalledProcessError:
        return None


def parse_config(config_path: str) -> Dict[str, Any]:
    """Parses a VM or container configuration file and extracts relevant settings."""
    parsed_config = {
        "net": {},
        "storage": {},
        "onboot": False,
        "privileged": True  # Default to privileged
    }

    if not os.path.exists(config_path):
        print(f"Config file not found at {config_path}")
        return {}

    with open(config_path, 'r') as file:
        for line in file:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            if line.startswith('['):
                break

            key, value = map(str.strip, line.split(":", 1))
            if key == "onboot":
                parsed_config['onboot'] = value == "1"
            elif key == "unprivileged":
                parsed_config['privileged'] = value != "1"  # Set to False if unprivileged is 1
            elif 'net' in key:
                parsed_config["net"][key] = dict(field.split("=") for field in value.split(","))
            elif key.startswith(("mp", "rootfs", "scsi")) and "scsihw" not in key:
                parsed_config["storage"][key] = parse_storage(value)

    return parsed_config


def parse_storage(value: str) -> Dict[str, Union[str, int]]:
    """Parses storage configuration from the config line."""
    fields = value.split(",")
    prefix = fields.pop(0)
    properties = {field.split("=")[0]: field.split("=")[1] for field in fields}
    properties["volume"], properties["subvol"] = prefix.split(":")
    properties["size"] = int(properties.get("size", "0G").strip("G"))
    return properties


def parse_nodes_status(nodes_status: List[Dict[str, Any]]) -> Dict[str, Any]:
    """Parses node status information and retrieves the node state from configuration files."""
    nodes = {}
    for node in nodes_status:
        if node["status"] != "online":
            continue

        node_name = node["node"]
        node["guests"] = []
        node["used_mem"] = node["mem"] / node["maxmem"]
        node["node_state"] = get_node_state(node_name)
        nodes[node_name] = node
    return nodes


def get_node_state(node_name: str) -> str:
    """Retrieves the node state from the node's configuration file."""
    config_path = f"/etc/pve/nodes/{node_name}/config"
    if not os.path.exists(config_path):
        return "UNKNOWN"

    with open(config_path, 'r') as file:
        content = file.read()
        match = re.search(r'`node_state%3A\s*(\w+)`', content)
        return match.group(1) if match else "ACTIVE"


def get_cluster_resources_by_type(resources: List[Dict[str, Any]], resource_type: str) -> List[Dict[str, Any]]:
    """Filters cluster resources by a specific type."""
    return [resource for resource in resources if resource["type"] == resource_type]


def get_tokens() -> Dict[str, Dict[str, str]]:
    """Reads and parses the token configuration file."""
    tokens = {}
    token_path = '/etc/pve/priv/token.cfg'
    if not os.path.exists(token_path):
        return tokens

    with open(token_path, 'r') as file:
        for line in file:
            parts = line.strip().split()
            if len(parts) < 2:
                continue
            token_name, token_value = parts[0], parts[1]
            user, tokenname = token_name.split("!")
            tokens[token_name] = {"user": user, "tokenname": tokenname, "token": token_value}
    return tokens


def get_facts() -> Dict[str, Any]:
    """Collects various facts about the cluster, including guests, nodes, pools, and tokens."""
    all_cluster_resources = get_all_cluster_resources()
    cluster_guests = get_cluster_resources_by_type(all_cluster_resources, "qemu")
    cluster_guests.extend(get_cluster_resources_by_type(all_cluster_resources, "lxc"))
    cluster_nodes = get_cluster_resources_by_type(all_cluster_resources, "node")
    cluster_pools = get_cluster_resources_by_type(all_cluster_resources, "pool")

    guests_by_id = {}
    guests_by_node = parse_nodes_status(cluster_nodes)

    for guest in cluster_guests:
        vmid = guest["vmid"]
        node = guest["node"]
        guests_by_id[vmid] = guest
        guests_by_node[node]["guests"].append(guest)

        config_file_path = get_config_path(vmid)
        if config_file_path:
            guest["config_path"] = config_file_path
            guest.update(parse_config(config_file_path))

    return {
        "guests_by_id": guests_by_id,
        "guests_by_node": guests_by_node,
        "pools": cluster_pools,
        "tokens": get_tokens(),
    }


def main() -> None:
    """Main function to print the cluster facts."""
    facts = get_facts()
    print(json.dumps(facts, indent=4))


if __name__ == "__main__":
    main()
