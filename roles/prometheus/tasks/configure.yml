---
- name: "Configure prometheus data retention"
  vars:
    retention_gb_80_percent: "{{ disk | int * 0.8 }}"
    retention_gb_2_free: "{{ disk - 2 }}"
    retention_gb: "{{ [retention_gb_80_percent, retention_gb_2_free] | min | int }}"
  ansible.builtin.lineinfile:
    path: /etc/default/prometheus
    regexp: '^ARGS='
    line: 'ARGS="--storage.tsdb.retention.size={{ retention_gb }}GB"'
    state: present
    create: yes
  register: args_file

- name: Get dependency map
  become: false
  local_action: 
    module: prometheus_dependency_map_info
    inventory_dir: "{{ inventory_dir }}"
    roles_dir: "{{ playbook_dir }}/../roles"
  register: role_dependencies

- name: CONFIGURE PROMETHEUS
  vars:
    vms: "{{ groups.all | map('extract', hostvars) | selectattr('technology', 'defined') | selectattr('technology', 'ne', 'lxc') | map(attribute='inventory_hostname') | list }}"
    lxc: "{{ groups.all | map('extract', hostvars) | selectattr('technology', 'defined') | selectattr('technology', 'ne', 'vm') | map(attribute='inventory_hostname') | list }}"
    devices: "{{ groups.all | difference(groups.is_virtual) }}"
    node_exporter_hosts: "{{ devices | union(vms) }}"
    node_exporter_lxc: "{{ lxc }}"
    dependency_map: "{{ role_dependencies.dependency_map }}"
  block:
  - debug:
      var: node_exporter_hosts

  - debug:
      var: dependency_map

  - name: Configure prometheus
    vars:
      rules_files:
        - rules-autoup.yml
        - rules.yml
    block:

    - name: Place prometheus configuration
      template:
        src: "prometheus.yml.j2"
        dest: "/etc/prometheus/prometheus.yml"
        owner: root
        group: root
        mode: '0644'
      register: prometheus_config

    - name: Place prometheus rules
      copy:
        src: "{{ item }}"
        dest: "/etc/prometheus/{{ item }}"
        owner: root
        group: root
        mode: '0644'
      register: prometheus_rules
      loop: "{{ rules_files }}"

- name: Execute promtool script
  shell: /bin/promtool check config /etc/prometheus/prometheus.yml
  register: prometheus_config_validation
  failed_when: false
  changed_when: false

- name: Fail in case of invalid config
  fail:
    msg: "{{ prometheus_config_validation.stderr }}"
  when: prometheus_config_validation.rc != 0

- name: Reload prometheus
  systemd:
    name: prometheus
    state: reloaded
  when: >
    prometheus_config.changed or prometheus_rules.changed or args_file.changed
