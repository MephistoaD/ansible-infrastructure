---
- name: Remove old interfaces
  vars:
    file_extensions:
      - "pub"
      - "priv"
      - "conf"
    interfaces_to_remove: "{{
            ansible_local.wireguard.keys() 
            | difference(wireguard_interfaces) 
            | list
        }}"
    files_to_remove: "{{
            interfaces_to_remove
            | product(file_extensions) | map('join', '.')
        }}"
  file:
    path: "/etc/wireguard/{{ item }}"
    state: absent
  loop: "{{ files_to_remove }}"

- name: Generate keypairs for each interface
  shell:
    executable: /usr/bin/bash
    cmd: |
      PRIVKEY_FILE="/etc/wireguard/{{ item }}.priv"
      PUBKEY_FILE="/etc/wireguard/{{ item }}.pub"

      wg genkey > $PRIVKEY_FILE
      wg pubkey < $PRIVKEY_FILE > $PUBKEY_FILE
  when:
    - item not in ansible_local.wireguard
  with_items: "{{ wireguard_interfaces }}"

- name: Collect keys from all peers
  include_tasks: collect_peer_keys.yml
  loop_control:
    loop_var: peer
  loop: "{{ ipam_info.vpn_peers[inventory_hostname] }}"

- name: Gather ansible_local facts
  setup:
    filter: ansible_local

- name: "Create Wireguard interface config"
  template:
    src: etc_wireguard_wg-interface.conf.j2  # /etc/wireguard/wg-server.conf.j2 / etc/wireguard/wg-client.conf.j2
    dest: "/etc/wireguard/{{ wg_interface }}.conf"
    mode: '0644'  # Set the executable permission on the script
  # debug:
  #   var: ipam_info.addresses[ipam_info.instances[inventory_hostname][wg_interface] | first].peers
  register: wg_config
  loop_control:
    loop_var: wg_interface
  loop: "{{ wireguard_interfaces }}"

- debug:
    msg: "{{ dict(wg_config.results | map(attribute='wg_interface') | zip(wg_config.results | map(attribute='changed'))) }}"

- name: Restart Interfaces service
  vars:
    config_changes: "{{ dict(wg_config.results | map(attribute='wg_interface') | zip(wg_config.results | map(attribute='changed'))) }}"
  systemd:
    name: "wg-quick@{{ wg_interface }}"
    state: restarted
    enabled: true
    daemon_reload: true
  when: 
    - config_changes[wg_interface]
  loop_control:
    loop_var: wg_interface
  loop: "{{ wireguard_interfaces }}"

- name: Start Interfaces service
  vars:
    config_changes: "{{ dict(wg_config.results | map(attribute='wg_interface') | zip(wg_config.results | map(attribute='changed'))) }}"
  systemd:
    name: "wg-quick@{{ wg_interface }}"
    state: started
    enabled: true
    daemon_reload: true
  loop_control:
    loop_var: wg_interface
  loop: "{{ wireguard_interfaces }}"